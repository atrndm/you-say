openapi: 3.0.0
info:
  title: YouSay API Docs
  version: 0.1.0
  description: This is a simple CRUD API application made with Express and documented with Swagger
servers:
  - url: http://localhost:8080/
paths:
  /polls:
    post:
      summary: Create a new poll
      tags:
        - Polls
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Poll"
      responses:
        201:
          description: New poll created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
  /polls/search:
    post:
      summary: Find Polls by criteria
      tags:
        - Polls
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Poll"
      responses:
        200:
          description: Search was successfull. The result might be an empty array.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Polls"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
  /polls/{slug}:
    get:
      summary: Get a single poll by slug
      tags:
        - Polls
      parameters:
        - name: slug
          in: path
          description: Poll's url path
          required: true
          schema:
            type: string
          example: the-poll-url
      responses:
        200:
          description: Poll successfully fetched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
        404:
          $ref: "#/components/responses/ResponseNotFound"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
  /polls/{pollId}:    
    post:
      summary: Update a single poll by id
      tags:
        - Polls
      parameters:
        - name: pollId
          in: path
          description: Poll's id
          required: true
          schema:
            type: string
          example: 606579a45e3da6769f563298
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Poll"
      responses:
        200:
          description: Poll updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
        404:
          $ref: "#/components/responses/ResponseNotFound"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
    delete:
      summary:  Delete a single poll by id
      tags:
        - Polls
      parameters:
        - name: pollId
          in: path
          description: Poll's id
          required: true
          schema:
            type: string
          example: 606579a45e3da6769f563298
      responses:
        200:
          description: Poll no longer exists.
          schema:
            $ref: "#/components/schemas/DeleteResponse"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
  /questions:
    post:
      summary: Create a new question
      tags:
        - Questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Question"
      responses:
        201:
          description: New question created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
  /questions/{questionId}:
    get:
      summary: Get a single question by id
      tags:
        - Questions
      parameters:
        - name: questionId
          in: path
          description: Question's id
          required: true
          schema:
            type: string
          example: 606579a45e3da6769f563298
      responses:
        200:
          description: Question successfully fetched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        404:
          $ref: "#/components/responses/ResponseNotFound"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
    post:
      summary: Update a single question by id
      tags:
        - Questions
      parameters:
        - name: questionId
          in: path
          description: Questions's id
          required: true
          schema:
            type: string
          example: 606579a45e3da6769f563298
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Question"
      responses:
        200:
          description: Question updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        404:
          $ref: "#/components/responses/ResponseNotFound"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
    delete:
      summary:  Delete a single question by id
      tags:
        - Questions
      parameters:
        - name: questionId
          in: path
          description: Question's id
          required: true
          schema:
            type: string
          example: 606579a45e3da6769f563298
      responses:
        200:
          description: Question no longer exists.
          schema:
            $ref: "#/components/schemas/DeleteResponse"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
  /answers:
    post:
      summary: Create a new question
      tags:
        - Answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Answer"
      responses:
        201:
          description: New answer created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Answer"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
  /answers/{answerId}:
    get:
      summary: Get a single question by id
      tags:
        - Answers
      parameters:
        - name: answerId
          in: path
          description: Answers's id
          required: true
          schema:
            type: string
          example: 606579a45e3da6769f563298
      responses:
        200:
          description: Question successfully fetched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        404:
          $ref: "#/components/responses/ResponseNotFound"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
    post:
      summary: Update a single question by id
      tags:
        - Answers
      parameters:
        - name: answerId
          in: path
          description: Answer's id
          required: true
          schema:
            type: string
          example: 606579a45e3da6769f563298
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Answer"
      responses:
        200:
          description: Answer updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Answer"
        404:
          $ref: "#/components/responses/ResponseNotFound"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
    delete:
      summary:  Delete a single answer by id
      tags:
        - Answers
      parameters:
        - name: answerId
          in: path
          description: Answer's id
          required: true
          schema:
            type: string
          example: 606579a45e3da6769f563298
      responses:
        200:
          description: Answer no longer exists.
          schema:
            $ref: "#/components/schemas/DeleteResponse"
        500:
          $ref: "#/components/responses/ResponseUnknownError"
components:
  schemas:
    Poll:
      type: object
      properties:
        title:
          type: string
        status:
          type: string
          enum: [draft, active, completed]
        slug:
          type: string
        questions:
          $ref: '#/components/schemas/Questions'
      example:
        title: The poll's title
        status: active
        slug: the-poll-url
    Polls:
      type: array
      items:
        $ref: '#/components/schemas/Poll'
    Question:
      type: object
      properties:
        title:
          type: string
        poll:
          type: string
        answers:
          $ref: '#/components/schemas/Answer'
      example:
        title: Question number 1
        poll: 606a1a23c42d89437ee1c96d
    Questions:
      type: array
      items:
        $ref: '#/components/schemas/Question'
    Answer:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        question:
          type: string
      example:
        title: Answer number 1
        id: 606a1a23c42d89437ee1c96d
        question: 606ae729b694b182ca2aaf88
    Answers:
      type: array
      items:
        $ref: '#/components/schemas/Answer'
    ResponseGeneralError:
      type: object
      properties:
        msg:
          type: string
  responses:
    DeleteResponse:
      description: Resource deleted.
      content:
        application/json:
          schema:
            rowsAffected: number
    ResponseNotFound:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseGeneralError"
    ResponseUnknownError:
      description: Unknown error has occured.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseGeneralError"
            example:
              msg: Something went wrong.
tags:
  - name: Polls
  - name: Questions
  - name: Answers